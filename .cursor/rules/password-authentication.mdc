---
description: Password Authentication Implementation Guidelines
---

# Password Authentication Implementation Rules

## Component Usage Guidelines

### Always Use Existing Components
- **ALWAYS use `PasswordLogin` component** for password-based authentication
- **Ask user for `login`, `refresh token` and `logout` APIs**
- **Show the user the existing payload and ask if they want to change anything**

## API Endpoints Structure

### Authentication Endpoints
```typescript
export const authEndpoints = {
  login: "/api/access/login/",
  refresh: "/api/access/refresh/",
  logout: "/api/access/logout/",
}
```

### API Payload Structure
- **Login**: `{ email: string, password: string, user_type: "user" }`
- **Signup**: `{ email: string, password: string, confirm_password: string, first_name: string, last_name: string }`
- **Logout**: `{ refresh_token: string }`
- **Refresh Token**: `{ refresh_token: string }`
- **Forgot Password**: `{ email: string }`
- **Reset Password**: `{ password: string, confirm_password: string, token?: string }`

## Password Authentication Flow

### Single-Step Login Process
1. **Email & Password Input**: User enters credentials and submits
2. **API Call**: Calls login endpoint with email, password, and user_type
3. **Success Handling**: Stores tokens and user data, redirects to dashboard
4. **Error Handling**: Shows validation errors inline

### Additional Flows
- **Forgot Password**: Request password reset link via email (if needed)
- **Reset Password**: Set new password with token validation (if needed)
- **Sign Up**: Create new account with email and password (if needed)

## State Management

### Form Management
- Use `useForm` from react-hook-form for form state
- Use `useMutation` from React Query for API calls
- Use `useAuth` hook for authentication state management
- Use `useNavigate` from react-router for navigation

### Token & User Data Storage
- Store tokens in cookies via `setTokenAndUserDataInCookies`
- Store in Zustand store via `setTokens` and `setUserData`
- Clear on logout via `clearTokenAndUserData`

## Error Handling

### Form Validation
- Use Zod schemas for validation
- Always use `handleApiError` from `@/lib/common-funnctions`
- Pass `setError` from form utils for field-level errors
- Show success messages with `toast.success`

### Login Error Pattern
```typescript
onError: (error) => {
  handleApiError(error, formUtils.setError, true);
}
```

## UI/UX Guidelines

### Design System
- Use consistent spacing: `gap-6`, `gap-4`, `gap-2`
- Use rounded corners: `rounded-lg`
- Use shadow effects: `shadow-xs`, `hover:shadow-sm`
- Use proper transitions: `transition-shadow duration-300`

### Layout Structure
Refer to the existing `PasswordLogin` component for layout structure.

### Interactive Elements
- Full-width submit button
- Loading states on button during submission
- Disabled state when pending
- Form validation feedback
- Success/error toast notifications

## File Structure

### Password Authentication Files
- [PasswordLogin.tsx](mdc:src/Pages/AuthPages/components/PasswordLogin.tsx) - Main password authentication component
- [LoginAndSignUpInputMeta.tsx](mdc:src/inputFormsMeta/LoginAndSignUpInputMeta.tsx) - Form metadata and validation schemas
- [LoginPage.tsx](mdc:src/Pages/AuthPages/LoginPage.tsx) - Main login page
- [useAuth.tsx](mdc:src/hooks/AuthHooks/useAuth.tsx) - Authentication hook

### Form Metadata Files
Form configurations in [LoginAndSignUpInputMeta.tsx](mdc:src/inputFormsMeta/LoginAndSignUpInputMeta.tsx):
- `loginInputs` - Login form fields (email, password)
- `signUpInputs` - Registration form fields
- `forgotPasswordInputs` - Forgot password form fields
- `resetPasswordInputs` - Reset password form fields

### Validation Schemas
Zod schemas in [LoginAndSignUpInputMeta.tsx](mdc:src/inputFormsMeta/LoginAndSignUpInputMeta.tsx):
- `loginSchema` - Email and password validation
- `signUpSchema` - Registration validation with password confirmation
- `forgotPasswordSchema` - Email validation for password reset
- `resetPasswordSchema` - New password validation with confirmation

### API Configuration
- [appConfig.ts](mdc:src/api/appConfig.ts) - API base URL configuration
- [endpoints.ts](mdc:src/api/endpoints/endpoints.ts) - API endpoints definition
- [appAxios.ts](mdc:src/api/appAxios.ts) - Axios configuration with interceptors

## Implementation Patterns

### Basic Login Component Pattern
```typescript
import AppForm from "@/components/Commmon/AppForm/AppForm";
import AppText from "@/components/Commmon/AppText";
import { Button } from "@/components/ui/button";
import { loginInputs } from "@/inputFormsMeta/LoginAndSignUpInputMeta";
import { useForm } from "react-hook-form";
import { useNavigate } from "react-router";
import useAuth from "@/hooks/AuthHooks/useAuth";
import { useMutation } from "@tanstack/react-query";
import makePostRequest from "@/api/makePostRequest";
import { authEndpoints } from "@/api/endpoints/endpoints";
import { toast } from "sonner";
import { handleApiError } from "@/lib/common-funnctions";

function PasswordLogin() {
  const navigate = useNavigate();
  const formUtils = useForm({
    defaultValues: {
      email: "",
      password: "",
    },
  });
  const { handleLoginSuccess } = useAuth();

  // Login Mutation
  const { mutate: loginMutation, isPending } = useMutation({
    mutationFn: (data: {
      email: string;
      password: string;
      user_type: string;
    }) => makePostRequest(authEndpoints.login, data),
    onSuccess: (response) => {
      handleLoginSuccess(response);
      navigate("/dashboard"); // Navigate to dashboard
      toast.success("Login successful");
    },
    onError: (error) => {
      handleApiError(error, formUtils.setError, true);
    },
  });

  const handleSubmit = (data: { email: string; password: string }) => {
    loginMutation({ ...data, user_type: "user" });
  };

  return (
    <div className="flex flex-col gap-6 border rounded-lg p-6 py-8 shadow-xs hover:shadow-sm transition-shadow duration-300 bg-background">
      <div className="flex flex-col items-center gap-2 text-center">
        <AppText className="text-2xl font-bold">Login to your account</AppText>
        <AppText className="text-muted-foreground text-sm text-balance">
          Enter your email below to login to your account
        </AppText>
      </div>
      <div className="pb-1">
        <AppForm
          formUtils={formUtils}
          inputArr={loginInputs}
          onSubmit={handleSubmit}
          isLoading={isPending}
          noDefaultButtons
        >
          <Button type="submit" className="w-full mt-4">
            Login
          </Button>
        </AppForm>
      </div>
    </div>
  );
}

export default PasswordLogin;
```

### Logout Pattern
```typescript
import useAuth from "@/hooks/AuthHooks/useAuth";

const LogoutButton = () => {
  const { handleLogout, logoutPending } = useAuth();

  return (
    <Button 
      onClick={handleLogout} 
      disabled={logoutPending}
      variant="outline"
    >
      {logoutPending ? "Logging out..." : "Logout"}
    </Button>
  );
};
```

## Authentication Response Handling

### Login Response Structure
```typescript
interface ILoginResponse {
  data: {
    access_token: string;
    refresh_token: string;
    email: string;
    first_name: string;
    last_name: string;
    id: string;
    // ... other user data fields
  }
}
```

### Token Storage Pattern
```typescript
// From useAuth hook
const handleLoginSuccess = (response: ILoginResponse) => {
  const { access_token, refresh_token, ...userData } = response.data;

  // Store tokens in cookies and state
  setTokenAndUserDataInCookies({ 
    access_token, 
    refresh_token, 
    userData, 
    teams: userData.teams 
  });
  
  setTokens({ 
    accessToken: access_token, 
    refreshToken: refresh_token 
  });
  
  setUserData(userData as IUserData);
  setIsAuthenticated(true);
};
```

## Development Guidelines

### Before Implementing Password Authentication
1. Check existing `PasswordLogin` component in [PasswordLogin.tsx](mdc:src/Pages/AuthPages/components/PasswordLogin.tsx)
2. Use existing form patterns from [LoginAndSignUpInputMeta.tsx](mdc:src/inputFormsMeta/LoginAndSignUpInputMeta.tsx)
3. Use [useAuth.tsx](mdc:src/hooks/AuthHooks/useAuth.tsx) hook for authentication logic
4. Follow API patterns in [endpoints.ts](mdc:src/api/endpoints/endpoints.ts)

### Code Quality Standards
- Always use TypeScript with proper types
- Use Zod schemas for form validation
- Handle errors consistently with `handleApiError`
- Use React Query for API state management
- Use Zustand for client state (auth store)
- Show user feedback with toast notifications
- Proper loading states on all buttons

### Security Considerations
- Never store plain passwords in state or logs
- Always send `user_type` with login requests
- Use secure cookie storage for tokens
- Implement token refresh mechanism
- Clear all auth data on logout
- Validate forms on both client and server

### Testing Considerations
- Test with invalid credentials
- Test with network errors
- Test password visibility toggle
- Test form validation errors
- Test successful login flow
- Test logout functionality
- Test token refresh flow

## Common Patterns

### Protected Route Pattern
```typescript
// Already implemented in AuthLayoutForProtectedRoutes
// Checks for valid tokens and redirects to login if not authenticated
```

### Token Refresh Pattern
```typescript
// Axios interceptor handles token refresh automatically
// See appAxios.ts for implementation
```

### Conditional Login Options
```typescript
// On LoginPage, show both OTP and Password options
<div className="w-full max-w-[480px]">
  <OTPLogin />
  {/* OR */}
  <PasswordLogin />
  {/* OR show both with tabs */}
</div>
```

This rule ensures consistent password-based authentication implementation across the application following established patterns and best practices.
